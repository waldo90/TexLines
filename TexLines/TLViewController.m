//
//  TLViewController.m
//  TexLines
//
//  Created by Pat Smith on 25/02/2013.
//  Copyright (c) 2013 Pat Smith. All rights reserved.
//
// http://stackoverflow.com/questions/2771408/opengl-es-2-0-rendering-with-a-texture
//
// http://stackoverflow.com/questions/1813035/opengl-es-iphone-drawing-anti-aliased-lines
//
/*
 
 Could use endcap rectangles with a  circle texture
 .  .
 .  .
 
 
 
 .  . 
 .  .

 Or use a triangle strip with edge overdraw.
 
 In both cases it might be possible to move outer vertices in the vertex shader to acheive effects.

*/
#import "TLViewController.h"



#import "constants.h"
//#import "MEllipse.h"
//#import "MSymbol.h"
#import "MLine.h"
#import "MRect.h"
#import "MEdgeLine.h"

#define BUFFER_OFFSET(i) ((char *)NULL + (i))

// Uniform index.
enum
{
    UNIFORM_MODELVIEWPROJECTION_MATRIX,
    UNIFORM_NORMAL_MATRIX,
    NUM_UNIFORMS
};
GLint uniforms[NUM_UNIFORMS];

// Attribute index.
enum
{
    ATTRIB_VERTEX,
    ATTRIB_NORMAL,
    NUM_ATTRIBUTES
};


@interface TLViewController () {
    GLuint _program;
    
    GLKMatrix4 _modelViewProjectionMatrix;
    GLKMatrix3 _normalMatrix;
    
    GLuint _positionSlot;
    GLuint _colorSlot;
    
    MLine*   _line;
    MRect* _rect;
    MEdgeLine* _edgeLine;
    
    GLKTextureInfo* _texture;
    GLuint _texCoordSlot;
    GLuint _textureUniform;
    
    float _cheeky;
}
@property (strong, nonatomic) EAGLContext *context;

- (void)setupGL;
- (void)tearDownGL;

- (BOOL)loadShaders;
- (BOOL)compileShader:(GLuint *)shader type:(GLenum)type file:(NSString *)file;
- (BOOL)linkProgram:(GLuint)prog;
- (BOOL)validateProgram:(GLuint)prog;
@end

@implementation TLViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    self.context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];
    
    if (!self.context) {
        NSLog(@"Failed to create ES context");
    }
    
    GLKView *view = (GLKView *)self.view;
    view.context = self.context;
    view.drawableDepthFormat = GLKViewDrawableDepthFormat24;
    view.drawableMultisample = GLKViewDrawableMultisample4X;
    
    [self setupGL];
}

- (void)dealloc
{
    [self tearDownGL];
    
    if ([EAGLContext currentContext] == self.context) {
        [EAGLContext setCurrentContext:nil];
    }
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    
    if ([self isViewLoaded] && ([[self view] window] == nil)) {
        self.view = nil;
        
        [self tearDownGL];
        
        if ([EAGLContext currentContext] == self.context) {
            [EAGLContext setCurrentContext:nil];
        }
        self.context = nil;
    }
    
    // Dispose of any resources that can be recreated.
}

- (void)setupGL
{
    [EAGLContext setCurrentContext:self.context];
    
    [self loadShaders];

    NSError *error;
    NSString* texPath = [[NSBundle mainBundle] pathForResource:@"blobtex" ofType:@"png"];
    _texture = [GLKTextureLoader textureWithContentsOfFile:texPath options:nil error:&error];
    if (error) {
        NSLog(@"Error loading texture from image: %@",error);
    }

    _line    = [[MLine   alloc] initWithPos:_positionSlot];
    _rect = [[MRect alloc] initWithPos:_positionSlot andTexSlot:_texCoordSlot];
    _rect.texture = _texture;
    [_rect setupGL];
 
    
//    _edgeLine = [[MEdgeLine alloc] initWithPos:_positionSlot andColorSlot:_colorSlot];

}

- (void)tearDownGL
{
    [EAGLContext setCurrentContext:self.context];
    
    // TODO delete GL buffers generated by shapes
    
    if (_program) {
        glDeleteProgram(_program);
        _program = 0;
    }
}

#pragma mark - GLKView and GLKViewController delegate methods

- (void)update
{
    //    float aspect = fabsf(self.view.bounds.size.width / self.view.bounds.size.height);
    
    float left   = (self.view.bounds.size.width  / 2) / - 100.0;
    float right  = (self.view.bounds.size.width  / 2) /   100.0;
    float bottom = (self.view.bounds.size.height / 2) / - 100.0;
    float top    = (self.view.bounds.size.height / 2) /   100.0;
    GLKMatrix4 projectionMatrix = GLKMatrix4MakeOrtho(left, right, bottom, top, 0.0f, 10.0f);
    _modelViewProjectionMatrix = projectionMatrix;
    
    _cheeky += self.timeSinceLastUpdate;
    
        
}

- (void)glkView:(GLKView *)view drawInRect:(CGRect)rect
{
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    // glEnable(GL_TEXTURE_2D);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE);//GL_ONE_MINUS_SRC_ALPHA);
    
    glUseProgram(_program);
    glUniformMatrix4fv(uniforms[UNIFORM_MODELVIEWPROJECTION_MATRIX], 1, 0, _modelViewProjectionMatrix.m);
        
    glBindVertexArrayOES(0);

    // Line
    glUniform4f(_colorSlot, 1.0f, 0.1f, 0.6f, 1.0f);
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, _texture.name);
    glUniform1i(_textureUniform, 0);
    glEnableVertexAttribArray(_texCoordSlot);
    glVertexAttribPointer(_texCoordSlot, 2, GL_FLOAT, GL_FALSE, 16, (GLvoid*)_line.vertices + 8);
    [_line render];
    
    
    // Rect
   // glUniform1i(_textureUniform, 0);
    _modelViewProjectionMatrix = GLKMatrix4Translate(_modelViewProjectionMatrix, 0.0f, sinf(_cheeky), 0.0f);
    glUniformMatrix4fv(uniforms[UNIFORM_MODELVIEWPROJECTION_MATRIX], 1, 0, _modelViewProjectionMatrix.m);
    glUniform4f(_colorSlot, 1.0f, 1.0f, 0.0f, 1.2f + sinf(_cheeky));
    [_rect render];
    
    //[_edgeLine render];
    
}

#pragma mark -  OpenGL ES 2 shader compilation

- (BOOL)loadShaders
{
    GLuint vertShader, fragShader;
    NSString *vertShaderPathname, *fragShaderPathname;
    
    // Create shader program.
    _program = glCreateProgram();
    
    // Create and compile vertex shader.
    vertShaderPathname = [[NSBundle mainBundle] pathForResource:@"Shader" ofType:@"vsh"];
    if (![self compileShader:&vertShader type:GL_VERTEX_SHADER file:vertShaderPathname]) {
        NSLog(@"Failed to compile vertex shader");
        return NO;
    }
    
    // Create and compile fragment shader.
    fragShaderPathname = [[NSBundle mainBundle] pathForResource:@"Shader" ofType:@"fsh"];
    if (![self compileShader:&fragShader type:GL_FRAGMENT_SHADER file:fragShaderPathname]) {
        NSLog(@"Failed to compile fragment shader");
        return NO;
    }
    
    // Attach vertex shader to program.
    glAttachShader(_program, vertShader);
    
    // Attach fragment shader to program.
    glAttachShader(_program, fragShader);
    
    // Bind attribute locations.
    // This needs to be done prior to linking.
    glBindAttribLocation(_program, GLKVertexAttribPosition, "position");
    //    glBindAttribLocation(_program, GLKVertexAttribNormal, "normal");
    glBindAttribLocation(_program, GLKVertexAttribTexCoord0, "texcoordIn");
//    glBindAttribLocation(_program, GLKVertexAttribColor, "color");
    
    // Link program.
    if (![self linkProgram:_program]) {
        NSLog(@"Failed to link program: %d", _program);
        
        if (vertShader) {
            glDeleteShader(vertShader);
            vertShader = 0;
        }
        if (fragShader) {
            glDeleteShader(fragShader);
            fragShader = 0;
        }
        if (_program) {
            glDeleteProgram(_program);
            _program = 0;
        }
        
        return NO;
    }
    
    // Get uniform locations.
    uniforms[UNIFORM_MODELVIEWPROJECTION_MATRIX] = glGetUniformLocation(_program, "modelViewProjectionMatrix");
    //    uniforms[UNIFORM_NORMAL_MATRIX] = glGetUniformLocation(_program, "normalMatrix");
    
    _positionSlot = glGetAttribLocation(_program, "position");
    _colorSlot = glGetUniformLocation(_program, "color");
//    _colorSlot = glGetAttribLocation(_program, "color");
    if (_colorSlot == -1) {
        NSLog(@"colorSlot error");
    }
   
    _texCoordSlot = glGetAttribLocation(_program, "texcoordIn");
    if (_texCoordSlot == -1) {
        NSLog(@"texCoordSlot error");
    }
    glEnableVertexAttribArray(_texCoordSlot);
    _textureUniform = glGetUniformLocation(_program, "texture");
    if (_textureUniform == -1) {
        NSLog(@"textureUniform error");
    }
    
    // Release vertex and fragment shaders.
    if (vertShader) {
        glDetachShader(_program, vertShader);
        glDeleteShader(vertShader);
    }
    if (fragShader) {
        glDetachShader(_program, fragShader);
        glDeleteShader(fragShader);
    }
    
    return YES;
}

- (BOOL)compileShader:(GLuint *)shader type:(GLenum)type file:(NSString *)file
{
    GLint status;
    const GLchar *source;
    
    source = (GLchar *)[[NSString stringWithContentsOfFile:file encoding:NSUTF8StringEncoding error:nil] UTF8String];
    if (!source) {
        NSLog(@"Failed to load vertex shader");
        return NO;
    }
    
    *shader = glCreateShader(type);
    glShaderSource(*shader, 1, &source, NULL);
    glCompileShader(*shader);
    
#if defined(DEBUG)
    GLint logLength;
    glGetShaderiv(*shader, GL_INFO_LOG_LENGTH, &logLength);
    if (logLength > 0) {
        GLchar *log = (GLchar *)malloc(logLength);
        glGetShaderInfoLog(*shader, logLength, &logLength, log);
        NSLog(@"Shader compile log:\n%s", log);
        free(log);
    }
#endif
    
    glGetShaderiv(*shader, GL_COMPILE_STATUS, &status);
    if (status == 0) {
        glDeleteShader(*shader);
        return NO;
    }
    
    return YES;
}

- (BOOL)linkProgram:(GLuint)prog
{
    GLint status;
    glLinkProgram(prog);
    
#if defined(DEBUG)
    GLint logLength;
    glGetProgramiv(prog, GL_INFO_LOG_LENGTH, &logLength);
    if (logLength > 0) {
        GLchar *log = (GLchar *)malloc(logLength);
        glGetProgramInfoLog(prog, logLength, &logLength, log);
        NSLog(@"Program link log:\n%s", log);
        free(log);
    }
#endif
    
    glGetProgramiv(prog, GL_LINK_STATUS, &status);
    if (status == 0) {
        return NO;
    }
    
    return YES;
}

- (BOOL)validateProgram:(GLuint)prog
{
    GLint logLength, status;
    
    glValidateProgram(prog);
    glGetProgramiv(prog, GL_INFO_LOG_LENGTH, &logLength);
    if (logLength > 0) {
        GLchar *log = (GLchar *)malloc(logLength);
        glGetProgramInfoLog(prog, logLength, &logLength, log);
        NSLog(@"Program validate log:\n%s", log);
        free(log);
    }
    
    glGetProgramiv(prog, GL_VALIDATE_STATUS, &status);
    if (status == 0) {
        return NO;
    }
    
    return YES;
}

@end
